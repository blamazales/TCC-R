geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 500, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Branca)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 150, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Branca)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 1000, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 1000, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 2000, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 5000, size = 2.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
ggplot(data, aes(x = Axis1, y = Axis2)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text(aes(label = Label), hjust = 0.5, vjust = 0.5, size = 4) + # Posiciona no centro
geom_density2d(color = "gray") +
labs(x = "Dimensão 1", y = "Dimensão 2") +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
ggplot(copy_raca_2018$Tipos_Escola, aes(x = Axis1, y = Axis2)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text(aes(label = Label), hjust = 0.5, vjust = 0.5, size = 4) + # Posiciona no centro
geom_density2d(color = "gray") +
labs(x = "Dimensão 1", y = "Dimensão 2") +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 5000, size = 2.5,hjust = 0.5, vjust = 0.5) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 5000, size = 2.5,hjust = 0.5, vjust = 0.5) +
geom_text(aes(label = Label), hjust = 0.5, vjust = 0.5, size = 4) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 5000, size = 2.5,hjust = 0.5, vjust = 0.5) +
geom_text(aes(label = Label), hjust = 0.5, vjust = 0.5, size = 4) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Vamos acrescentar as informações das observacões ao mapa perceptual da ACM
ACM_observacoes_df %>%
ggplot(aes(x = Axis1, y = Axis2, label = copy_raca_2018$Tipos_Escola)) +
geom_point(shape = 17, color = "red", size = 2) +
geom_hline(yintercept = 0, linetype = "longdash", color = "grey48") +
geom_vline(xintercept = 0, linetype = "longdash", color = "grey48") +
geom_text_repel(max.overlaps = 5000, size = 2.5,hjust = 0.5, vjust = 0.5) +
geom_text(hjust = 0.5, vjust = 0.5, size = 4) +
geom_density2d(color = "gray") +
geom_label_repel(data = df_ACM,
aes(x = CS1, y = CS2,
label = rownames(df_ACM),
fill = Variável, max.overlaps = 500),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# A função para a criação da ACM pede que sejam utilizados "fatores"
copy_raca_2018 <- as.data.frame(unclass(copy_raca_2018), stringsAsFactors=TRUE)
# Tabelas de contingência (todas apresentam associação com alguma variável?)
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Branca,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Preta,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Parda,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Amarela,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Indígena,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = copy_raca_2018$Tipos_Escola,
var.col = copy_raca_2018$Não_Dispõe_da_Informação,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = Sudeste_def_2018$Tipos_Escola,
var.col = Sudeste_def_2018$Deficiência_Múltipla,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = Sudeste_def_2018$Tipos_Escola,
var.col = Sudeste_def_2018$Deficiência_Intelectual,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = Sudeste_def_2018$Tipos_Escola,
var.col = Sudeste_def_2018$Superdotação,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
# Vamos gerar a ACM
ACM <- dudi.acm(copy_raca_2018, scannf = FALSE)
# Analisando as variâncias de cada dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
paste0(round(perc_variancia,2),"%")
# Quantidade de categorias por variável
quant_categorias <- apply(copy_raca_2018,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel(max.overlaps = 500, size = 3, nudge_x = 0.1, nudge_y = 0.1) +  # Ajuste os valores de nudge_x e nudge_y conforme necessário
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
ggplotly(
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
)
# É possível obter as coordenadas das observações
df_coord_obs <- ACM$li
# Matriz binária
matriz_binaria <- matlogic(copy_raca_2018[,2:8])
matriz_binaria
# Para a matriz de Burt
matriz_burt <- burt(copy_raca_2018[,2:8])
matriz_burt
verifica_burt <- t(matriz_binaria) %*% matriz_binaria
# Elaboração da análise de correspondência múltipla (ACM)
ACM <- dudi.acm(copy_raca_2018[,2:8], scannf = FALSE)
# Visualização das coordenadas principais das categorias das variáveis
# Método da matriz de Burt B (componente 'co' do objeto 'ACM')
round(ACM$co, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Visualização das coordenadas-padrão das categorias das variáveis
# Método da matriz binária (componente 'c1' do objeto 'ACM')
round(ACM$c1, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Massas das linhas e colunas (componente 'cw' do objeto 'ACM')
ACM$cw
# Inércias principais (componente 'eig' do objeto 'ACM')
ACM$eig
# Percentual de variância explicada por dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
perc_variancia
# Visualização do percentual de variância explicada por dimensão
data.frame(Dimensão = paste("Dimensão", 1:length(perc_variancia)),
Variância = perc_variancia) %>%
ggplot(aes(x = Dimensão,
y = Variância,
label = paste0(round(Variância, 2),"%"))) +
geom_bar(stat = "identity", fill = "cyan") +
geom_text(vjust = 2.5, size = 5) +
theme_bw()
# Definição da quantidade de categorias de cada variável qualitativa
quant_categorias <- apply(copy_raca_2018[,2:8],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária ('c1')
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Visualizando as coordenadas
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
mutate(Categoria = gsub("perfil.","", Categoria),
Categoria = gsub("aplicacao.","", Categoria),
Categoria = gsub("estado_civil.","", Categoria)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Matriz binária
matriz_binaria <- matlogic(copy_raca_2019[,2:8])
matriz_binaria
# Para a matriz de Burt
matriz_burt <- burt(copy_raca_2019[,2:8])
matriz_burt
verifica_burt <- t(matriz_binaria) %*% matriz_binaria
# Elaboração da análise de correspondência múltipla (ACM)
ACM <- dudi.acm(copy_raca_2019[,2:8], scannf = FALSE)
# Visualização das coordenadas principais das categorias das variáveis
# Método da matriz de Burt B (componente 'co' do objeto 'ACM')
round(ACM$co, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Visualização das coordenadas-padrão das categorias das variáveis
# Método da matriz binária (componente 'c1' do objeto 'ACM')
round(ACM$c1, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Massas das linhas e colunas (componente 'cw' do objeto 'ACM')
ACM$cw
# Inércias principais (componente 'eig' do objeto 'ACM')
ACM$eig
# Percentual de variância explicada por dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
perc_variancia
# Visualização do percentual de variância explicada por dimensão
data.frame(Dimensão = paste("Dimensão", 1:length(perc_variancia)),
Variância = perc_variancia) %>%
ggplot(aes(x = Dimensão,
y = Variância,
label = paste0(round(Variância, 2),"%"))) +
geom_bar(stat = "identity", fill = "cyan") +
geom_text(vjust = 2.5, size = 5) +
theme_bw()
# Definição da quantidade de categorias de cada variável qualitativa
quant_categorias <- apply(copy_raca_2019[,2:8],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária ('c1')
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Visualizando as coordenadas
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
mutate(Categoria = gsub("perfil.","", Categoria),
Categoria = gsub("aplicacao.","", Categoria),
Categoria = gsub("estado_civil.","", Categoria)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Matriz binária
matriz_binaria <- matlogic(copy_raca_2020[,2:8])
matriz_binaria
# Para a matriz de Burt
matriz_burt <- burt(copy_raca_2020[,2:8])
matriz_burt
verifica_burt <- t(matriz_binaria) %*% matriz_binaria
# Elaboração da análise de correspondência múltipla (ACM)
ACM <- dudi.acm(copy_raca_2020[,2:8], scannf = FALSE)
# Visualização das coordenadas principais das categorias das variáveis
# Método da matriz de Burt B (componente 'co' do objeto 'ACM')
round(ACM$co, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Visualização das coordenadas-padrão das categorias das variáveis
# Método da matriz binária (componente 'c1' do objeto 'ACM')
round(ACM$c1, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Massas das linhas e colunas (componente 'cw' do objeto 'ACM')
ACM$cw
# Inércias principais (componente 'eig' do objeto 'ACM')
ACM$eig
# Percentual de variância explicada por dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
perc_variancia
# Visualização do percentual de variância explicada por dimensão
data.frame(Dimensão = paste("Dimensão", 1:length(perc_variancia)),
Variância = perc_variancia) %>%
ggplot(aes(x = Dimensão,
y = Variância,
label = paste0(round(Variância, 2),"%"))) +
geom_bar(stat = "identity", fill = "cyan") +
geom_text(vjust = 2.5, size = 5) +
theme_bw()
# Definição da quantidade de categorias de cada variável qualitativa
quant_categorias <- apply(copy_raca_2020[,2:8],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária ('c1')
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Visualizando as coordenadas
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
mutate(Categoria = gsub("perfil.","", Categoria),
Categoria = gsub("aplicacao.","", Categoria),
Categoria = gsub("estado_civil.","", Categoria)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
